# .github/workflows/build.yml
name: Build Artifacts

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/cd.yaml'
      - 'flake.nix'
      - 'flake.lock'
      - 'package.json'
      - 'yarn.lock'
      - 'src/**/*'
      - 'src-tauri/**/*'
  pull_request:
    branches:
      - main
    paths:
      - '.github/workflows/cd.yaml'
      - 'flake.nix'

jobs:
  nix-build:
    name: Build (Linux & macOS)
    runs-on: ${{ matrix.platform.on }}
    strategy:
      fail-fast: false
      matrix:
        platform: 
          - on: ubuntu-latest 
            name: linux-x86_64
          - on: ubuntu-24.04-arm 
            name: linux-aarch64
          - on: macos-latest 
            name: macos-aarch64
          - on: macos-13
            name: macos-x86_64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Nix
      uses: cachix/install-nix-action@v30
      with:
        nix_path: nixpkgs=channel:nixos-25.05

    - name: Set up Cachix cache (optional)
      uses: cachix/cachix-action@v15
      with:
        name: devenv

    - name: Build with Nix flake
      run: |
        nix build .#quikscore -L 2>&1

    - name: Upload Nix build artifacts (Linux)
      if: ${{ contains(matrix.platform.name, 'linux') }}
      uses: actions/upload-artifact@v4
      with:
        name: quikscore-${{ matrix.platform.name }}
        include-hidden-files: true
        path: |
          result
    - name: Upload Nix build artifacts (macOS)
      if: ${{ contains(matrix.platform.name, 'macos') }}
      uses: actions/upload-artifact@v4
      with:
        name: quikscore-${{ matrix.platform.name }}
        path: |
          result/Applications

  windows-build:
    name: Build (Windows)
    runs-on: windows-latest
    strategy:
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Corepack 
      uses: actions/setup-node@v4
      with:
        node-version: '22.14'
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.14'
        cache: yarn

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with: 
        toolchain: nightly-2025-06-08

    - name: Install MSYS2 & Tesseract/Leptonica
      uses: msys2/setup-msys2@v2
      id: msys2
      with:
        msystem: UCRT64
        update: true
        install: >-
          mingw-w64-ucrt-x86_64-tesseract-ocr

    - name: Install OpenCV & Other dependencies (cmake, llvm)
      run: | 
        choco install opencv cmake -y
        choco install llvm --version=19.1.7 --force

    - name: Set up Environment variables
      env:
        MSYS2: ${{ steps.msys2.outputs.msys2-location }}
      run: |
        echo "RUSTFLAGS=-Z threads=8" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        echo "OPENCV_INCLUDE_PATHS=C:\tools\opencv\build\include" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        echo "OPENCV_LINK_PATHS=C:\tools\opencv\build\x64\vc16\lib" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        echo "OPENCV_DLL_PATH=C:\tools\opencv\build\x64\vc16\bin" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        echo "OPENCV_LINK_LIBS=opencv_world4110" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        echo "LEPTONICA_INCLUDE_PATH=$env:MSYS2\ucrt64\include" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        echo "LEPTONICA_LINK_PATHS=$env:MSYS2\ucrt64\lib" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        echo "LEPTONICA_DLL_PATH=$env:MSYS2\ucrt64\bin" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        echo "LEPTONICA_LINK_LIBS=leptonica" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        echo "TESSERACT_INCLUDE_PATHS=$env:MSYS2\ucrt64\include" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        echo "TESSERACT_LINK_PATHS=$env:MSYS2\ucrt64\lib" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        echo "TESSERACT_DLL_PATH=$env:MSYS2\ucrt64\bin" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        echo "TESSERACT_LINK_LIBS=tesseract" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - name: Copy required dlls
      shell: msys2 {0}
      run: |
        cp /ucrt64/bin/libtesseract-5.5.dll src-tauri/
        LIBS=`ldd libtesseract-5.5.dll | grep /ucrt64 | awk '{ print $3 }'`
        for lib in $LIBS; do cp $lib src-tauri/; done

    - name: Include dlls in Tauri config
      run: |
        $jsonPath = "src-tauri/tauri.conf.json"
        $json = Get-Content $jsonPath -Raw | ConvertFrom-Json

        $dlls = Get-ChildItem -Path src-tauri -Filter *.dll -File
        $json.bundle.resources += $dlls.Name

        $json.bundle.resources += "opencv_world4110.dll"

        $json | ConvertTo-Json -Depth 10 | Set-Content $jsonPath

    - name: Build Tauri app
      run: |
        yarn install
        yarn tauri build

    - name: Group Binary Bundle
      run: |
        mkdir -p src-tauri/target/release/bin
        mv src-tauri/target/release/*.dll src-tauri/target/release/bin/
        mv src-tauri/target/release/quikscore.exe src-tauri/target/release/bin/

    - name: Upload Windows artifact (Binary bundle)
      uses: actions/upload-artifact@v4
      with:
        name: quikscore-windows-x86_64
        path: |
          src-tauri/target/release/bin

    - name: Upload Windows artifact (Installers)
      uses: actions/upload-artifact@v4
      with:
        name: quikscore-windows-x86_64-installers
        path: |
          src-tauri/target/release/bundle
